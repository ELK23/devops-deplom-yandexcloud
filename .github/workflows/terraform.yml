name: Terraform Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:
        description: Choose action
        type: choice
        options: [apply, destroy]
        default: apply
        required: true

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: false

jobs:
  apply:
    # run on push, or manual dispatch with mode=apply
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'apply')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure_deploy
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Write YC SA key (from base64) and validate
        run: |
          set -euo pipefail
          echo '${{ secrets.YC_KEY_JSON_B64 }}' | base64 -d > yc-key.json
          jq -e . yc-key.json >/dev/null || { echo "YC_KEY_JSON_B64 invalid"; exit 1; }

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"

      - name: Terraform Apply
        run: terraform apply -auto-approve \
          -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"

      - name: Show Outputs
        run: |
          echo "master_public_ip=$(terraform output -raw k8s_master_public_ip)"
          echo "master_private_ip=$(terraform output -raw k8s_master_private_ip)"
          echo "worker_b_ip=$(terraform output -raw k8s_worker_b_ip)"
          echo "worker_d_ip=$(terraform output -raw k8s_worker_d_ip)"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          AWS_EC2_METADATA_DISABLED: "true"

  destroy:
    # run only on manual dispatch with mode=destroy
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'destroy'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure_deploy
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Write YC SA key (from base64) and validate
        run: |
          set -euo pipefail
          echo '${{ secrets.YC_KEY_JSON_B64 }}' | base64 -d > yc-key.json
          jq -e . yc-key.json >/dev/null || { echo "YC_KEY_JSON_B64 invalid"; exit 1; }

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve \
          -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"

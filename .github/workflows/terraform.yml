name: Terraform Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:
        description: Choose action
        type: choice
        options: [apply, destroy]
        default: apply
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure_deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Write YC SA key (from base64) and validate
        run: |
          set -euo pipefail
          echo '${{ secrets.YC_KEY_JSON_B64 }}' | base64 -d > yc-key.json
          jq -e . yc-key.json >/dev/null 2>&1 || { echo "YC_KEY_JSON_B64 decodes to invalid JSON"; exit 1; }
          test -s yc-key.json || { echo "Decoded yc-key.json is empty"; exit 1; }
          echo "yc-key.json size: $(wc -c < yc-key.json) bytes"
          jq -r '.service_account_id, .id' yc-key.json >/dev/null 2>&1 || { echo "Missing fields in key JSON"; exit 1; }

      - name: Terraform Init (remote state in Yandex Object Storage)
        run: |
          set -euo pipefail
          terraform init -no-color 2>&1 | tee init.log
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"
          TF_LOG: INFO
          TF_LOG_PATH: tf-init-debug.log

      # ---------------- APPLY PATH ----------------
      - name: Terraform Apply (stream logs)
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'apply')
        run: |
          set -euo pipefail
          terraform apply -auto-approve -no-color -input=false \
            -parallelism=2 \
            -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
            -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="access_key=${{ secrets.YC_ACCESS_KEY }}" \
            -var="secret_key=${{ secrets.YC_SECRET_KEY }}" \
            -var="service_account_id=${{ secrets.YC_SERVICE_ACCOUNT_ID }}" \
            -var="mysql_root_password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            2>&1 | tee apply.log
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"
          TF_LOG: INFO
          TF_LOG_PATH: tf-apply-debug.log

      - name: Show last 200 lines of apply log
        if: always() && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'apply'))
        run: |
          echo "===== tail -n 200 apply.log ====="
          tail -n 200 apply.log || true
          echo "===== tail -n 200 tf-apply-debug.log ====="
          tail -n 200 tf-apply-debug.log || true

      - name: Show Outputs
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'apply')
        run: |
          echo "master_public_ip=$(terraform output -raw k8s_master_public_ip)"
          echo "master_private_ip=$(terraform output -raw k8s_master_private_ip)"
          echo "worker_b_ip=$(terraform output -raw k8s_worker_b_ip)"
          echo "worker_d_ip=$(terraform output -raw k8s_worker_d_ip)"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          AWS_EC2_METADATA_DISABLED: "true"


      # # 1) Start SSH agent with your private key
      # - name: Setup SSH (agent + known_hosts)
      #   uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: |
      #       ${{ secrets.SSH_PRIVATE_KEY }}

      # # 2) Export Terraform outputs to env vars for later steps
      # - name: Export Terraform outputs to env
      #   run: |
      #     echo "K8S_MASTER_PUBLIC_IP=$(terraform output -raw k8s_master_public_ip)" >> $GITHUB_ENV
      #     echo "K8S_MASTER_PRIVATE_IP=$(terraform output -raw k8s_master_private_ip)" >> $GITHUB_ENV
      #     echo "K8S_WORKER_B_IP=$(terraform output -raw k8s_worker_b_ip)" >> $GITHUB_ENV
      #     echo "K8S_WORKER_D_IP=$(terraform output -raw k8s_worker_d_ip)" >> $GITHUB_ENV
      #   env:
      #     AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
      #     AWS_EC2_METADATA_DISABLED: "true"

      # - name: Wait for SSH on master
      #   run: |
      #     set -euo pipefail
      #     MASTER="${{ env.K8S_MASTER_PUBLIC_IP }}"
      #     echo "Waiting for SSH on $MASTER:22 ..."
      #     for i in {1..30}; do
      #       if timeout 5 bash -lc "echo >/dev/tcp/$MASTER/22" 2>/dev/null; then
      #         echo "SSH is open."
      #         exit 0
      #       fi
      #       echo "[$i/30] still not ready, sleeping 10s..."
      #       sleep 10
      #     done
      #     echo "Timeout waiting for SSH on $MASTER" >&2
      #     exit 1

      # # Add the master host key with retries
      # - name: Add master to known_hosts (retry)
      #   run: |
      #     set -euo pipefail
      #     MASTER="${{ env.K8S_MASTER_PUBLIC_IP }}"
      #     for i in {1..10}; do
      #       if ssh-keyscan -T 10 -H "$MASTER" >> ~/.ssh/known_hosts 2>/dev/null; then
      #         echo "Host key added."
      #         exit 0
      #       fi
      #       echo "ssh-keyscan attempt $i failed, sleeping 6s..."
      #       sleep 6
      #     done
      #     echo "Failed to add host key for $MASTER" >&2
      #     exit 1

      # - name: Clone Kubespray
      #   run: |
      #     git clone --branch v2.24.1 https://github.com/kubernetes-sigs/kubespray.git ansible-kubespray
      #     cd ansible-kubespray
      #     python3 -m venv venv
      #     . venv/bin/activate
      #     pip install -r requirements.txt

      # - name: Render Kubespray inventory/hosts.yaml
      #   run: |
      #     mkdir -p ../ansible-kubespray/inventory/mycluster
      #     K8S_MASTER_PUBLIC_IP="${{ env.K8S_MASTER_PUBLIC_IP }}" \
      #     K8S_MASTER_PRIVATE_IP="${{ env.K8S_MASTER_PRIVATE_IP }}" \
      #     K8S_WORKER_B_IP="${{ env.K8S_WORKER_B_IP }}" \
      #     K8S_WORKER_D_IP="${{ env.K8S_WORKER_D_IP }}" \
      #     envsubst < generate_hosts.yaml.tmpl \
      #       > ../ansible-kubespray/inventory/mycluster/hosts.yaml

      # ---------------- DESTROY PATH ----------------
      - name: Terraform Destroy (stream logs)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'destroy'
        run: |
          set -euo pipefail
          terraform destroy -auto-approve -no-color -input=false \
            -parallelism=2 \
            -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
            -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="access_key=${{ secrets.YC_ACCESS_KEY }}" \
            -var="secret_key=${{ secrets.YC_SECRET_KEY }}" \
            -var="service_account_id=${{ secrets.YC_SERVICE_ACCOUNT_ID }}" \
            -var="mysql_root_password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            2>&1 | tee destroy.log
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.YC_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
          YC_SERVICE_ACCOUNT_KEY_FILE: yc-key.json
          AWS_EC2_METADATA_DISABLED: "true"
          TF_LOG: INFO
          TF_LOG_PATH: tf-destroy-debug.log

      - name: Show last 200 lines of destroy log
        if: always() && github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'destroy'
        run: |
          echo "===== tail -n 200 destroy.log ====="
          tail -n 200 destroy.log || true
          echo "===== tail -n 200 tf-destroy-debug.log ====="
          tail -n 200 tf-destroy-debug.log || true
